cat("\n\nTraining a logistic regression classifier with transport attributes only (with intercept)...")
logistic_classifier_transport.attributes <- train_classifier("logistic", data_train, predictors, target, intercept = TRUE)
# Analyze the table of deviance:
# cat("\nTable of deviance:\n")
# print(anova(logistic_classifier_transport.attributes, test="Chisq"))
# The difference between the null deviance and the residual deviance shows how our model is doing against the null model
# (a model with only the intercept). The wider this gap, the better. Analyzing the table we can see the drop in deviance when
# adding each variable one at a time. A large p-value here indicates that the model without the variable explains more or less
# the same amount of variation. Ultimately what you would like to see is a significant drop in deviance and the AIC.
# Accuracy of the logistic model:
# training set:
fitted_train <- predict(logistic_classifier_transport.attributes, newdata=data_train, type='response')
fitted_train <- ifelse(fitted_train>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_train != data_train$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the training set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Training set confusion matrix:\n")
print(confusionMatrix(fitted_train, data_train$Deliv.Tspt)$table)   # test set confusion matrix
# test set:
fitted_test <- predict(logistic_classifier_transport.attributes, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Test set confusion matrix:\n")
print(confusionMatrix(fitted_test, data_test$Deliv.Tspt)$table)   # test set confusion matrix
# Visualize the logistic regression objective function in the parameter space:
plot_objective_function_slice(model=logistic_classifier_transport.attributes, plot.w_dim=c(2,3), n.grid=100, zoom = 1)
# 3D scatter plot of Deliv.Tspt on delta_price_rail_truck, delta_time_rail_truck, delta_buffer.time_rail_truck:
require(rgl)
open3d()
plot3d(data_train$delta_price_rail_truck, data_train$delta_time_rail_truck, data_train$delta_buffer.time_rail_truck, pch=20, col=alpha(as.numeric(as.factor(data_train$Deliv.Tspt))+2, 0.5),
xlab="delta_price(rail,truck), AUD/TEU", ylab="delta_time(rail,truck), days", zlab="delta_buffer.time(rail,truck), days", main="Containers served by Patrick")
# Add the decision plane of logistic_classifier_transport.attributes:
betas <- coef(logistic_classifier_transport.attributes)
a <- betas['delta_price_rail_truck']
b <- betas['delta_time_rail_truck']
c <- betas['delta_buffer.time_rail_truck']
d <- ifelse(!is.na(betas['(Intercept)']), betas['(Intercept)']-decision.threshold, -decision.threshold)
planes3d(a, b, c, d, alpha=0.5)
fitted_train <- predict(logistic_classifier_transport.attributes.no_intercept, newdata=data_train, type='response')
fitted_train <- ifelse(fitted_train>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_train != data_train$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the training set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Training set confusion matrix:\n")
print(confusionMatrix(fitted_train, data_train$Deliv.Tspt)$table)   # test set confusion matrix
fitted_test <- predict(logistic_classifier_transport.attributes.no_intercept, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Test set confusion matrix:\n")
print(confusionMatrix(fitted_test, data_test$Deliv.Tspt)$table)   # test set confusion matrix
open3d()
plot3d(data_train$delta_price_rail_truck, data_train$delta_time_rail_truck, data_train$delta_buffer.time_rail_truck, pch=20, col=alpha(as.numeric(as.factor(data_train$Deliv.Tspt))+2, 0.5),
xlab="delta_price(rail,truck), AUD/TEU", ylab="delta_time(rail,truck), days", zlab="delta_buffer.time(rail,truck), days", main="Containers served by Patrick")
# Add the decision plane of logistic_classifier_transport.attributes:
betas <- coef(logistic_classifier_transport.attributes.no_intercept)
a <- betas['delta_price_rail_truck']
b <- betas['delta_time_rail_truck']
c <- betas['delta_buffer.time_rail_truck']
d <- ifelse(!is.na(betas['(Intercept)']), betas['(Intercept)']-decision.threshold, -decision.threshold)
planes3d(a, b, c, d, alpha=0.5)
covariates <- c('delta_price_rail_truck','delta_time_rail_truck','delta_buffer.time_rail_truck','delta_unreliability_rail_truck')
# Normalize the data and save into separate data.normalized_train and data.normalized_test:
data.normalized_train_list <- normalize_data(data_train, covariates)   # normalize 'covariates' components of training data
data.normalized_train <- data.normalized_train_list[["data.normalized"]]  # normalized dataset
data.normalized_train.means <- data.normalized_train_list[["means"]]      # a vector of covariate means used in normalization
data.normalized_train.sigmas <- data.normalized_train_list[["sigmas"]]    # covariate stds used in normalization
data.normalized_test <- normalize_data(data_test, covariates, data.normalized_train.means, data.normalized_train.sigmas)[["data.normalized"]]   # apply the same normalization to test data
logistic_classifier_transport.attributes.normalized <- train_classifier("logistic", data.normalized_train, covariates, target)
cat("Summary of the logistic model:\n")
print(summary(logistic_classifier_transport.attributes.normalized))
fitted_train <- predict(logistic_classifier_transport.attributes.normalized, newdata=data.normalized_train, type='response')
fitted_train <- ifelse(fitted_train>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_train != data.normalized_train$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the training set:',round(misClasificError*100,2),"%\n")
# test set:
fitted_test <- predict(logistic_classifier_transport.attributes.normalized, newdata=data.normalized_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data.normalized_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Test set confusion matrix:\n")
print(confusionMatrix(fitted_test, data.normalized_test$Deliv.Tspt)$table)   # test set confusion matrix
fitted_test <- predict(logistic_classifier_transport.attributes.no_intercept, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
fitted_test <- predict(logistic_classifier_transport.attributes, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
covariates <- c('delta_price_rail_truck','delta_time_rail_truck','delta_buffer.time_rail_truck','delta_unreliability_rail_truck')
# Normalize the data and save into separate data.normalized_train and data.normalized_test:
data.normalized_train_list <- normalize_data(data_train, covariates)   # normalize 'covariates' components of training data
data.normalized_train <- data.normalized_train_list[["data.normalized"]]  # normalized dataset
data.normalized_train.means <- data.normalized_train_list[["means"]]      # a vector of covariate means used in normalization
data.normalized_train.sigmas <- data.normalized_train_list[["sigmas"]]    # covariate stds used in normalization
data.normalized_test <- normalize_data(data_test, covariates, data.normalized_train.means, data.normalized_train.sigmas)[["data.normalized"]]   # apply the same normalization to test data
logistic_classifier_transport.attributes.normalized <- train_classifier("logistic", data.normalized_train, covariates, target)
fitted_test <- predict(logistic_classifier_transport.attributes.normalized, newdata=data.normalized_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data.normalized_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
logistic_classifier_transport.attributes.normalized <- glm(as.factor(Deliv.Tspt) ~ delta_price_rail_truck + delta_time_rail_truck + delta_buffer.time_rail_truck, #+ delta_unreliability_rail_truck + multiple_destinations,
data = data.normalized_train, family=binomial(link='logit'))
fitted_test <- predict(logistic_classifier_transport.attributes.normalized, newdata=data.normalized_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data.normalized_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
logistic_classifier_transport.attributes.normalized <- train_classifier("logistic", data.normalized_train, covariates, target)
fitted_test <- predict(logistic_classifier_transport.attributes.normalized, newdata=data.normalized_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data.normalized_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
train_classifier <- function(model_class=c("RF","logistic"), data, predictors, target, intercept=TRUE)
# Train a classifier of requested model_class, on data_train, using specified predictors and target
{
cat("\n\nTraining a",model_class,"classifier for target",sQuote(target),"with predictors",predictors,"...")
if (intercept) formula <- as.formula(paste("as.factor(",target,") ~ ", form_rhs(predictors))) else formula <- as.formula(paste("as.factor(",target,") ~ ", form_rhs(c("0",predictors))))
cat("Model:\n")
print(formula)
if (model_class == "RF"){
model <- randomForest(formula, data = data, type='classification', na.action = na.omit, importance = TRUE, ntree = 500)
}
if (model_class == "logistic"){
model <- glm(formula, data = data, family=binomial(link='logit'))
}
cat("DONE\n")
cat("Summary of the trained classifier:\n")
if (model_class=='RF') print(model) else print(summary(model))
return(model)
}
logistic_classifier_transport.attributes.normalized <- train_classifier("logistic", data.normalized_train, covariates, target)
train_classifier <- function(model_class=c("RF","logistic"), data, predictors, target, intercept=TRUE)
# Train a classifier of requested model_class, on data_train, using specified predictors and target
{
if (intercept) formula <- as.formula(paste("as.factor(",target,") ~ ", form_rhs(predictors))) else formula <- as.formula(paste("as.factor(",target,") ~ ", form_rhs(c("0",predictors))))
cat("\n\nTraining a",model_class,"classifier for target",sQuote(target),"of the form:\n")
print(formula)
if (model_class == "RF"){
model <- randomForest(formula, data = data, type='classification', na.action = na.omit, importance = TRUE, ntree = 500)
}
if (model_class == "logistic"){
model <- glm(formula, data = data, family=binomial(link='logit'))
}
cat("DONE\n")
cat("Summary of the trained classifier:\n")
if (model_class=='RF') print(model) else print(summary(model))
return(model)
}
logistic_classifier_transport.attributes.normalized <- train_classifier("logistic", data.normalized_train, covariates, target)
train_classifier <- function(model_class=c("RF","logistic"), data, predictors, target, intercept=TRUE)
# Train a classifier of requested model_class, on data_train, using specified predictors and target
{
if (intercept) formula <- as.formula(paste("as.factor(",target,") ~ ", form_rhs(predictors))) else formula <- as.formula(paste("as.factor(",target,") ~ ", form_rhs(c("0",predictors))))
cat("\n\nTraining a",model_class,"classifier for target",sQuote(target),"of the form:\n\n")
print(formula)
if (model_class == "RF"){
model <- randomForest(formula, data = data, type='classification', na.action = na.omit, importance = TRUE, ntree = 500)
}
if (model_class == "logistic"){
model <- glm(formula, data = data, family=binomial(link='logit'))
}
cat("\nDONE\n")
cat("Summary of the trained classifier:\n")
if (model_class=='RF') print(model) else print(summary(model))
return(model)
}
logistic_classifier_transport.attributes.normalized <- train_classifier("logistic", data.normalized_train, covariates, target)
logistic_classifier_transport.attributes.normalized <- glm(as.factor(Deliv.Tspt) ~ delta_price_rail_truck + delta_time_rail_truck + delta_buffer.time_rail_truck, #+ delta_unreliability_rail_truck + multiple_destinations,
data = data.normalized_train, family=binomial(link='logit'))
print(summary(logistic_classifier_transport.attributes.normalized))
predictors <- c('delta_price_rail_truck' + 'delta_time_rail_truck' + 'delta_buffer.time_rail_truck')
predictors <- c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck')
logistic_classifier_transport.attributes.normalized <- train_classifier("logistic", data.normalized_train, covariates, target)
logistic_classifier_transport.attributes.normalized <- glm(as.factor(Deliv.Tspt) ~ delta_price_rail_truck + delta_time_rail_truck + delta_buffer.time_rail_truck, #+ delta_unreliability_rail_truck + multiple_destinations,
data = data.normalized_train, family=binomial(link='logit'))
cat("DONE\n")
# Summary of the logistic model:
cat("Summary of the logistic model:\n")
print(summary(logistic_classifier_transport.attributes.normalized))
logistic_classifier_transport.attributes.normalized <- train_classifier("logistic", data.normalized_train, predictors, target)
fitted_train <- predict(logistic_classifier_transport.attributes.normalized, newdata=data.normalized_train, type='response')
fitted_train <- ifelse(fitted_train>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_train != data.normalized_train$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the training set:',round(misClasificError*100,2),"%\n")
# test set:
fitted_test <- predict(logistic_classifier_transport.attributes.normalized, newdata=data.normalized_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data.normalized_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Test set confusion matrix:\n")
print(confusionMatrix(fitted_test, data.normalized_test$Deliv.Tspt)$table)   # test set confusion matrix
# Visualize the logistic regression objective function in the parameter space:
covariates <- c('delta_price_rail_truck','delta_time_rail_truck','delta_buffer.time_rail_truck','delta_unreliability_rail_truck')
pca_object <- prcomp(~delta_price_rail_truck+delta_time_rail_truck+delta_buffer.time_rail_truck+delta_unreliability_rail_truck,
data=data_train[,covariates], na.action=na.omit)
pca_df <- pca_object$x
data.pca_train <- data_train
data.pca_train[,colnames(pca_df)] <- NA
data.pca_train[complete.cases(data_train[,covariates]),colnames(pca_df)] <- pca_df
data.pca_test <- cbind(data_test, predict(pca_object, newdata=data_test))   # apply the same PCA-transform to the test data
# 2D scatter plot of Deliv.Tspt on PC1, PC2:
predictors <- c("PC1", "PC2", "PC3")
logistic_classifier_transport.attributes.pca <- train_classifier("logistic", data.pca_train, predictors, target)
fitted_train <- predict(logistic_classifier_transport.attributes.pca, newdata=data.pca_train, type='response')
fitted_train <- ifelse(fitted_train>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_train != data.pca_train$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the training set:',round(misClasificError*100,2),"%\n")
# test set:
fitted_test <- predict(logistic_classifier_transport.attributes.pca, newdata=data.pca_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data.pca_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Test set confusion matrix:\n")
print(confusionMatrix(fitted_test, data.pca_test$Deliv.Tspt)$table)   # test set confusion matrix
open3d()
plot3d(data.pca_train$PC1, data.pca_train$PC2, data.pca_train$PC3, pch=20, col=alpha(as.numeric(as.factor(data.pca_train$Deliv.Tspt))+2, 0.5),
xlab="PC1", ylab="PC2", zlab="PC3", main="Containers served by Patrick")
# Add the decision plane of logistic_classifier_transport.attributes:
betas <- coef(logistic_classifier_transport.attributes.pca)
a <- betas['PC1']
b <- betas['PC2']
c <- betas['PC3']
d <- (betas['(Intercept)']-decision.threshold)
planes3d(a, b, c, d, alpha=0.5)
rattle()
library(rattle)
rattle()
logistic_classifier_transport.attributes <- train_classifier("logistic", data_train, predictors, target, intercept = FALSE)
cat("\n\nTraining a logistic regression classifier with transport attributes only (no intercept)...")
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck')
logistic_classifier_transport.attributes.no_intercept <- train_classifier("logistic", data_train, predictors, target, intercept = FALSE)
# Accuracy of the logistic model:
# training set:
fitted_train <- predict(logistic_classifier_transport.attributes.no_intercept, newdata=data_train, type='response')
fitted_train <- ifelse(fitted_train>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_train != data_train$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the training set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Training set confusion matrix:\n")
print(confusionMatrix(fitted_train, data_train$Deliv.Tspt)$table)   # test set confusion matrix
# test set:
fitted_test <- predict(logistic_classifier_transport.attributes.no_intercept, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Test set confusion matrix:\n")
print(confusionMatrix(fitted_test, data_test$Deliv.Tspt)$table)   # test set confusion matrix
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck')
logistic_classifier_transport.attributes.no_intercept <- train_classifier("logistic", data_train, predictors, target, intercept = FALSE)
0.02*42
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck', 'multiple_destinations')
logistic_classifier_transport.attributes.no_intercept <- train_classifier("logistic", data_train, predictors, target, intercept = FALSE)
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck', 'multiple_destinations')
rf_classifier_transport.attributes <- train_classifier("RF", data_train, predictors, target)
print(rf_classifier_transport.attributes$importance)
varImpPlot(rf_classifier_transport.attributes)
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck')
rf_classifier_transport.attributes <- train_classifier("RF", data_train, predictors, target)
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck')
logistic_classifier_transport.attributes.no_intercept <- train_classifier("logistic", data_train, predictors, target, intercept = FALSE)
fitted_train <- predict(logistic_classifier_transport.attributes.no_intercept, newdata=data_train, type='response')
fitted_train <- ifelse(fitted_train>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_train != data_train$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the training set:',round(misClasificError*100,2),"%\n")
fitted_test <- predict(logistic_classifier_transport.attributes.no_intercept, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
cat("\n\nTraining a logistic regression classifier with transport attributes only (with intercept)...")
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck')
logistic_classifier_transport.attributes <- train_classifier("logistic", data_train, predictors, target, intercept = TRUE)
fitted_test <- predict(logistic_classifier_transport.attributes, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
predictors <- c('Combined.Cval','Combined.Gross.Weight.tons','Weight','UN.Code',
'delta_price_rail_truck','delta_time_rail_truck', 'delta_buffer.time_rail_truck', 'delta_unreliability_rail_truck', 'multiple_destinations')
logistic_classifier_container_service.attributes <- train_classifier("logistic",data_train,predictors, target)
fitted_train <- predict(logistic_classifier_container_service.attributes, newdata=data_train, type='response')
fitted_train <- ifelse(fitted_train>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_train != data_train$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the training set:',round(misClasificError*100,2),"%\n")
# test set:
fitted_test <- predict(logistic_classifier_container_service.attributes, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
logistic_classifier_container_service.attributes <- train_classifier("logistic",data_train,predictors, target)
fitted_test <- predict(logistic_classifier_container_service.attributes, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
cat("\n\nTraining a RF classifier with BOTH container and transport attributes...")
predictors <- c('Combined.Cval','Combined.Gross.Weight.tons','Weight','UN.Code',
'delta_price_rail_truck','delta_time_rail_truck', 'delta_buffer.time_rail_truck', 'delta_unreliability_rail_truck', 'multiple_destinations')
rf_classifier_container_service.attributes <- train_classifier("RF", data_train, predictors, target)
cat("Test set confusion matrix:\n")
confusionMatrix(predict(rf_classifier_container_service.attributes, newdata=data_test), data_test$Deliv.Tspt)   # OOB confusion matrix
fitted_test <- predict(rf_classifier_container_service.attributes, newdata=data_test, type='response')
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('\n\nRF model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%")
cat("\n\nVariable importance:\n")
print(rf_classifier_container_service.attributes$importance)
varImpPlot(rf_classifier_container_service.attributes)
predictors = c('Combined.Cval','Combined.Gross.Weight.tons', 'Weight','UN.Code')
logistic_classifier_container.attributes <-  train_classifier("logistic", data_train, predictors, target)
misClasificError <- misclass_error(logistic_classifier_container.attributes, data_test, target)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck')
logistic_classifier_transport.attributes.no_intercept <- train_classifier("logistic", data_train, predictors, target, intercept = FALSE)
# Accuracy of the logistic model:
# training set:
fitted_train <- predict(logistic_classifier_transport.attributes.no_intercept, newdata=data_train, type='response')
fitted_train <- ifelse(fitted_train>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_train != data_train$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the training set:',round(misClasificError*100,2),"%\n")
require(caret)
cat("Training set confusion matrix:\n")
print(confusionMatrix(fitted_train, data_train$Deliv.Tspt)$table)   # test set confusion matrix
# test set:
fitted_test <- predict(logistic_classifier_transport.attributes.no_intercept, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
cat("\n\nTraining a logistic regression classifier with transport attributes only (with intercept)...")
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck')
logistic_classifier_transport.attributes <- train_classifier("logistic", data_train, predictors, target, intercept = TRUE)
fitted_test <- predict(logistic_classifier_transport.attributes, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck')
rf_classifier_transport.attributes <- train_classifier("RF", data_train, predictors, target)
fitted_test <- predict(rf_classifier_transport.attributes, newdata=data_test, type='response')
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('\n\nRF model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
cat("\n\nTraining a logistic regression classifier with BOTH container and transport attributes...")
predictors <- c('Combined.Cval','Combined.Gross.Weight.tons','Weight','UN.Code',
'delta_price_rail_truck','delta_time_rail_truck', 'delta_buffer.time_rail_truck', 'delta_unreliability_rail_truck', 'multiple_destinations')
logistic_classifier_container_service.attributes <- train_classifier("logistic",data_train,predictors, target)
fitted_test <- predict(logistic_classifier_container_service.attributes, newdata=data_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure and all others success
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
cat("\n\nTraining a RF classifier with BOTH container and transport attributes...")
predictors <- c('Combined.Cval','Combined.Gross.Weight.tons','Weight','UN.Code',
'delta_price_rail_truck','delta_time_rail_truck', 'delta_buffer.time_rail_truck', 'delta_unreliability_rail_truck', 'multiple_destinations')
rf_classifier_container_service.attributes <- train_classifier("RF", data_train, predictors, target)
fitted_test <- predict(rf_classifier_container_service.attributes, newdata=data_test, type='response')
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('\n\nRF model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%")
cat("\n\nTraining a logistic classifier with container attributes only...")
predictors = c('Combined.Cval','Combined.Gross.Weight.tons', 'Weight','UN.Code')
logistic_classifier_container.attributes <-  train_classifier("logistic", data_train, predictors, target)
misClasificError <- misclass_error(logistic_classifier_container.attributes, data_test, target)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
predictors = c('Combined.Cval','Combined.Gross.Weight.tons', 'Weight','UN.Code')
rf_classifier_container.attributes <- train_classifier("RF", data_train, predictors, target)
cat("\nVariable importance:\n")
print(rf_classifier_container.attributes$importance)
varImpPlot(rf_classifier_container.attributes)
predictors = c('Combined.Cval','Combined.Gross.Weight.tons', 'Weight','UN.Code','multiple_destinations')
rf_classifier_container.attributes <- train_classifier("RF", data_train, predictors, target)
cat("\nVariable importance:\n")
print(rf_classifier_container.attributes$importance)
varImpPlot(rf_classifier_container.attributes)
misClasificError <- misclass_error(rf_classifier_container.attributes, data_test, target)
cat('\nMean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
predictors = c('Combined.Cval','Combined.Gross.Weight.tons', 'Weight','UN.Code','multiple_destinations')
logistic_classifier_container.attributes <-  train_classifier("logistic", data_train, predictors, target)
misClasificError <- misclass_error(logistic_classifier_container.attributes, data_test, target)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
predictors = c('Combined.Cval','Combined.Gross.Weight.tons', 'Weight','UN.Code')
logistic_classifier_container.attributes <-  train_classifier("logistic", data_train, predictors, target)
misClasificError <- misclass_error(logistic_classifier_container.attributes, data_test, target)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
predictors = c('delta_price_rail_truck', 'delta_time_rail_truck', 'delta_buffer.time_rail_truck')
rf_classifier_transport.attributes <- train_classifier("RF", data_train, predictors, target)
cat("\nVariable importance:\n")
print(rf_classifier_transport.attributes$importance)
varImpPlot(rf_classifier_transport.attributes)
cat("\nVariable importance:\n")
print(rf_classifier_transport.attributes$importance)
cat("\nVariable importance:\n")
print(rf_classifier_transport.attributes$importance)
fitted_test <- predict(rf_classifier_transport.attributes, newdata=data_test, type='response')
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('\n\nRF model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
cat("\n\nTraining a RF classifier with BOTH container and transport attributes...")
predictors <- c('Combined.Cval','Combined.Gross.Weight.tons','Weight','UN.Code',
'delta_price_rail_truck','delta_time_rail_truck', 'delta_buffer.time_rail_truck', 'delta_unreliability_rail_truck', 'multiple_destinations')
rf_classifier_container_service.attributes <- train_classifier("RF", data_train, predictors, target)
print(rf_classifier_container_service.attributes$importance)
predictors <- c('Combined.Cval','Combined.Gross.Weight.tons','Weight','UN.Code',
'delta_price_rail_truck','delta_time_rail_truck', 'delta_buffer.time_rail_truck', 'delta_unreliability_rail_truck')
rf_classifier_container_service.attributes <- train_classifier("RF", data_train, predictors, target)
fitted_test <- predict(rf_classifier_container_service.attributes, newdata=data_test, type='response')
misClasificError <- mean(fitted_test != data_test$Deliv.Tspt, na.rm=TRUE)
cat('\n\nRF model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%")
cat("\n\nVariable importance:\n")
print(rf_classifier_container_service.attributes$importance)
varImpPlot(rf_classifier_container_service.attributes)
print(rf_classifier_container_service.attributes$importance)
varImpPlot(rf_classifier_container_service.attributes)
print(rf_classifier_container_service.attributes$importance)
mean(c(0.1971060,5 0.075154371))
mean(c(0.19710605, 0.075154371))
cat('\n\nRF model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%")
cat("\n\nTraining a logistic regression classifier with BOTH container and transport attributes...")
predictors <- c('Combined.Cval','Combined.Gross.Weight.tons','Weight','UN.Code',
'delta_price_rail_truck','delta_time_rail_truck', 'delta_buffer.time_rail_truck', 'delta_unreliability_rail_truck')
logistic_classifier_container_service.attributes <- train_classifier("logistic",data_train,predictors, target)
plot(imports_sample_combined$delta_price_rail_truck, imports_sample_combined$delta_time_rail_truck, pch=20, col=alpha(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2, 0.5),
xlab="delta_price(rail,truck), AUD/TEU", ylab="delta_time(rail,truck), hours", main="Containers served by Patrick")
legend("topright", legend = unique(imports_sample_combined$Deliv.Tspt), pch=20, col = unique(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2))
plot(imports_sample_combined$delta_time_rail_truck, imports_sample_combined$delta_buffer.time_rail_truck, pch=20, col=alpha(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2, 0.5),
xlab="delta_time(rail,truck), hours", ylab="delta_buffer.time(rail,truck), hours", main="Containers served by Patrick")
legend("topleft", legend = unique(imports_sample_combined$Deliv.Tspt), pch=20, col = unique(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2))
require(scales)
plot(imports_sample_combined$Combined.Gross.Weight.tons, imports_sample_combined$Combined.Cval, log = "xy", pch=20, col=alpha(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2, 0.15),
xlab="Combined Container Gross Weight, tons", ylab="Container FOB value, AUD", main="Containers served by Patrick")
legend("topright", legend = unique(imports_sample_combined$Deliv.Tspt), pch=20, col = unique(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2))
plot(imports_sample_combined$Weight, imports_sample_combined$Combined.Cval, log = "xy", pch=20, col=alpha(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2, 0.15),
xlab="Container Weight reported by Patrick, tons", ylab="Container FOB value, AUD", main="Containers served by Patrick")
legend("topright", legend = unique(imports_sample_combined$Deliv.Tspt), pch=20, col = unique(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2))
?prcomp
covariates <- c('delta_price_rail_truck','delta_time_rail_truck','delta_buffer.time_rail_truck','delta_unreliability_rail_truck')
pca_object <- prcomp(as.formula(paste("~",form_rhs(covariates))),
data=data_train[,covariates], na.action=na.omit)
data.pca_train <- cbind(data_train, predict(pca_object, newdata=data_train))
pca_df <- pca_object$x
data.pca_train <- data_train
data.pca_train[,colnames(pca_df)] <- NA
data.pca_train[complete.cases(data_train[,covariates]),colnames(pca_df)] <- pca_df
data.pca_train <- cbind(data_train, predict(pca_object, newdata=data_train))
View(data.pca_train)
data.pca_test <- cbind(data_test, predict(pca_object, newdata=data_test))   # apply the same PCA-transform to the test data
# 2D scatter plot of Deliv.Tspt on PC1, PC2:
plot(data.pca_train$PC1, data.pca_train$PC2, pch=20, col=alpha(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2, 0.5),
xlab="PC1", ylab="PC2", main="Containers served by Patrick")
legend("topright", legend = unique(imports_sample_combined$Deliv.Tspt), pch=20, col = unique(as.numeric(as.factor(imports_sample_combined$Deliv.Tspt))+2))
# Train a logistic classifier on PC1, PC2, PC3:
cat("\n\nTraining a logistic regression classifier with principal components of transport attributes...")
predictors <- c("PC1", "PC2", "PC3")
logistic_classifier_transport.attributes.pca <- train_classifier("logistic", data.pca_train, predictors, target)
fitted_test <- predict(logistic_classifier_transport.attributes.pca, newdata=data.pca_test, type='response')
fitted_test <- ifelse(fitted_test>decision.threshold, "T (TRUCK)", "R (RAIL)")   # in glm, the 1st level of factor denotes failure (in this case RAIL) and all others success (TRUCK)
misClasificError <- mean(fitted_test != data.pca_test$Deliv.Tspt, na.rm=TRUE)
cat('Logistic model\'s mean misclassification error on the testing set:',round(misClasificError*100,2),"%\n")
open3d()
plot3d(data.pca_train$PC1, data.pca_train$PC2, data.pca_train$PC3, pch=20, col=alpha(as.numeric(as.factor(data.pca_train$Deliv.Tspt))+2, 0.5),
xlab="PC1", ylab="PC2", zlab="PC3", main="Containers served by Patrick")
# Add the decision plane of logistic_classifier_transport.attributes:
betas <- coef(logistic_classifier_transport.attributes.pca)
a <- betas['PC1']
b <- betas['PC2']
c <- betas['PC3']
d <- (betas['(Intercept)']-decision.threshold)
planes3d(a, b, c, d, alpha=0.5)
open3d()
plot3d(data.pca_train$PC1, data.pca_train$PC2, data.pca_train$PC3, pch=20, col=alpha(as.numeric(as.factor(data.pca_train$Deliv.Tspt))+2, 0.5),
xlab="PC1", ylab="PC2", zlab="PC3", main="Containers served by Patrick")
betas <- coef(logistic_classifier_transport.attributes.pca)
a <- betas['PC1']
b <- betas['PC2']
c <- betas['PC3']
d <- (betas['(Intercept)']-decision.threshold)
planes3d(a, b, c, d, alpha=0.5)
library(rattle)
rattle()
install.packages("ggraptR")
coef(logistic_classifier_transport.attributes.pca)
open3d()
plot3d(data.pca_train$PC1, data.pca_train$PC2, data.pca_train$PC3, pch=20, col=alpha(as.numeric(as.factor(data.pca_train$Deliv.Tspt))+2, 0.5),
xlab="PC1", ylab="PC2", zlab="PC3", main="Containers served by Patrick")
# Add the decision plane of logistic_classifier_transport.attributes:
betas <- coef(logistic_classifier_transport.attributes.pca)
a <- betas['PC1']
b <- betas['PC2']
c <- betas['PC3']
d <- (betas['(Intercept)']-decision.threshold)
planes3d(a, b, c, d, alpha=0.5)
today(
)
start <- as.Date('2013-11-28')
today <- as.Date('2015-03-04')
all_days <- seq(start, today, by = 'day')
year <- as.POSIXlt(all_days)$year + 1900
urls <- paste0('http://cran-logs.rstudio.com/', year, '/', all_days, '.csv.gz')
for (i in 1:length(urls)) {
download.file(urls[i], sprintf("~/Projects/rstats/temp%i.csv.gz", i))
}
for (i in 1:length(urls)) {
download.file(urls[i], sprintf("~/Projects/rstats/temp%i.csv.gz", i))
}
for (i in 1:length(urls)) {
download.file(urls[i], sprintf("~/Projects/rstats/temp%i.csv.gz", i))
}
source('~/Projects/cran_package_download_logs.R')
source('~/Projects/cran_package_download_logs.R')
Sys.time()
as.Date(Sys.time())
source('~/Projects/cran_package_download_logs.R')
shiny::runApp('Projects/Owen/shiny_app')
